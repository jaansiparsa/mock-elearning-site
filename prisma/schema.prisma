generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                 @id @default(cuid())
  email                  String                 @unique
  password               String
  firstName              String
  lastName               String
  username               String                 @unique
  role                   String                 @default("student")
  avatarUrl              String                 @default("https://placekitten.com/200/200")
  notificationPreference Boolean                @default(true)
  preferredStudyTime     String                 @default("morning")
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  lastLearned            DateTime?
  currentStreak          Int                    @default(0)
  weeklyLearningGoal     Int                    @default(300) // Default to 5 hours (300 minutes) per week
  achievements           Achievement[]
  submissions            AssignmentSubmission[]
  quizSubmissions        QuizSubmission[]
  courses                Course[]               @relation("CourseInstructor")
  enrollments            CourseEnrollment[]
  ratings                CourseRating[]

  @@index([email])
  @@index([username])
  @@index([role])
}

model Course {
  courseId        String               @id @default(cuid())
  title           String
  description     String
  thumbnailUrl    String               @default("https://placekitten.com/400/300")
  category        String
  difficultyLevel String
  instructorId    String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  assignments     Assignment[]
  instructor      User                 @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
  enrollments     CourseEnrollment[]
  requiredBy      CoursePrerequisite[] @relation("RequiredByCourses")
  prerequisites   CoursePrerequisite[] @relation("CoursePrerequisites")
  ratings         CourseRating[]
  lessons         Lesson[]
  quizzes         Quiz[]

  @@index([instructorId])
  @@index([category])
  @@index([difficultyLevel])
}

model CoursePrerequisite {
  id             String   @id @default(cuid())
  courseId       String
  prerequisiteId String
  createdAt      DateTime @default(now())
  prerequisite   Course   @relation("RequiredByCourses", fields: [prerequisiteId], references: [courseId], onDelete: Cascade)
  course         Course   @relation("CoursePrerequisites", fields: [courseId], references: [courseId], onDelete: Cascade)

  @@unique([courseId, prerequisiteId])
  @@index([courseId])
  @@index([prerequisiteId])
}

model Lesson {
  lessonId          String             @id @default(cuid())
  courseId          String
  title             String
  description       String
  order             Int
  estimatedTime     Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  assignments       Assignment[]
  course            Course             @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  lessonCompletions LessonCompletion[]

  @@index([courseId])
  @@index([order])
}

model CourseEnrollment {
  enrollmentId      String             @id @default(cuid())
  studentId         String
  courseId          String
  enrolledAt        DateTime           @default(now())
  course            Course             @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  student           User               @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lessonCompletions LessonCompletion[]

  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
}

model LessonCompletion {
  completionId String           @id @default(cuid())
  enrollmentId String
  lessonId     String
  completedAt  DateTime         @default(now())
  lesson       Lesson           @relation(fields: [lessonId], references: [lessonId], onDelete: Cascade)
  enrollment   CourseEnrollment @relation(fields: [enrollmentId], references: [enrollmentId], onDelete: Cascade)

  @@unique([enrollmentId, lessonId])
  @@index([enrollmentId])
  @@index([lessonId])
}

model CourseRating {
  ratingId  String   @id @default(cuid())
  courseId  String
  studentId String
  rating    Float
  review    String?
  createdAt DateTime @default(now())
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [courseId], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@index([courseId])
  @@index([studentId])
}

model Assignment {
  assignmentId   String                 @id @default(cuid())
  courseId       String
  lessonId       String?
  title          String
  description    String
  points         Int
  rubricUrl      String?
  createdAt      DateTime               @default(now())
  lesson         Lesson?                @relation(fields: [lessonId], references: [lessonId], onDelete: Cascade)
  course         Course                 @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  submissions    AssignmentSubmission[]

  @@index([courseId])
  @@index([lessonId])
}

model AssignmentSubmission {
  submissionId      String     @id @default(cuid())
  studentId         String
  assignmentId      String
  startedAt         DateTime?
  endedAt           DateTime?
  grade             Float?
  feedback          String?    // Instructor feedback
  submissionContent String?    // Student's submission notes
  fileUrl           String?    // URL to uploaded file
  fileName          String?    // Original filename
  assignedAt        DateTime   @default(now())
  dueDate           DateTime
  status            String     @default("not_started")
  submittedAt       DateTime?  // When the submission was made
  assignment        Assignment @relation(fields: [assignmentId], references: [assignmentId], onDelete: Cascade)
  student           User       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId, assignmentId])
  @@index([assignmentId])
  @@index([studentId])
  @@index([status])
  @@index([dueDate])
  @@index([submittedAt])
}

model QuizSubmission {
  submissionId      String     @id @default(cuid())
  studentId         String
  quizId            String
  startedAt         DateTime?
  endedAt           DateTime?
  score             Float?     // Quiz score (points earned)
  maxScore          Float      // Maximum possible score
  feedback          String?    // Instructor feedback
  answers           String?    // Student's answers (could be JSON)
  assignedAt        DateTime   @default(now())
  dueDate           DateTime
  status            String     @default("not_started") // not_started, in_progress, completed, graded
  submittedAt       DateTime?  // When the quiz was submitted
  quiz              Quiz       @relation(fields: [quizId], references: [quizId], onDelete: Cascade)
  student           User       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId, quizId])
  @@index([quizId])
  @@index([studentId])
  @@index([status])
  @@index([dueDate])
  @@index([submittedAt])
}

model Achievement {
  achievementId String   @id @default(cuid())
  studentId     String
  badgeType     String
  earnedAt      DateTime @default(now())
  student       User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([badgeType])
}

model Quiz {
  quizId           String           @id @default(cuid())
  courseId         String
  title            String
  description      String?
  totalQuestions   Int              @default(0)
  totalPoints      Int              @default(100)
  timeLimit        Int?             // Time limit in minutes
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  course           Course           @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  submissions      QuizSubmission[]

  @@index([courseId])
}


