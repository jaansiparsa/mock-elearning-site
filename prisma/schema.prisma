// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// E-Learning Platform Schema

model User {
    id                      String    @id @default(cuid())
    email                   String    @unique
    password                String
    firstName               String
    lastName                String
    username                String    @unique
    role                    UserRole  @default(student)
    avatarUrl               String    @default("https://placekitten.com/200/200")
    notificationPreference  Boolean   @default(true)
    preferredStudyTime      StudyTime @default(morning)
    createdAt               DateTime  @default(now())
    updatedAt               DateTime  @updatedAt
    lastLearned             DateTime?
    currentStreak           Int       @default(0)

    // Relationships
    courses                 Course[]  @relation("CourseInstructor")
    enrollments            CourseEnrollment[]
    ratings                CourseRating[]
    submissions            AssignmentSubmission[]
    achievements           Achievement[]
    quizSubmissions        QuizSubmission[]

    @@index([email])
    @@index([username])
    @@index([role])
}

model Course {
    courseId        String    @id @default(cuid())
    title           String
    description     String
    thumbnailUrl    String    @default("https://placekitten.com/400/300")
    category        CourseCategory
    difficultyLevel DifficultyLevel
    instructorId    String
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    // Relationships
    instructor      User      @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
    prerequisites   CoursePrerequisite[] @relation("CoursePrerequisites")
    requiredBy      CoursePrerequisite[] @relation("RequiredByCourses")
    lessons         Lesson[]
    enrollments     CourseEnrollment[]
    ratings         CourseRating[]
    assignments     Assignment[]

    @@index([instructorId])
    @@index([category])
    @@index([difficultyLevel])
}

model CoursePrerequisite {
    id             String   @id @default(cuid())
    courseId       String
    prerequisiteId String
    createdAt      DateTime @default(now())

    // Relationships
    course         Course   @relation("CoursePrerequisites", fields: [courseId], references: [courseId], onDelete: Cascade)
    prerequisite   Course   @relation("RequiredByCourses", fields: [prerequisiteId], references: [courseId], onDelete: Cascade)

    @@unique([courseId, prerequisiteId])
    @@index([courseId])
    @@index([prerequisiteId])
}

model Lesson {
    lessonId       String   @id @default(cuid())
    courseId       String
    title          String
    description    String
    order          Int
    estimatedTime  Int      // in minutes
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    // Relationships
    course         Course   @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
    lessonCompletions LessonCompletion[]

    @@index([courseId])
    @@index([order])
}

model CourseEnrollment {
    enrollmentId      String   @id @default(cuid())
    studentId         String
    courseId          String
    enrolledAt        DateTime @default(now())

    // Relationships
    student          User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
    course           Course   @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
    lessonCompletions LessonCompletion[]

    @@unique([studentId, courseId])
    @@index([studentId])
    @@index([courseId])
}

model LessonCompletion {
    completionId String   @id @default(cuid())
    enrollmentId String
    lessonId     String
    completedAt  DateTime @default(now())

    // Relationships
    enrollment   CourseEnrollment @relation(fields: [enrollmentId], references: [enrollmentId], onDelete: Cascade)
    lesson       Lesson           @relation(fields: [lessonId], references: [lessonId], onDelete: Cascade)

    @@unique([enrollmentId, lessonId])
    @@index([enrollmentId])
    @@index([lessonId])
}

model CourseRating {
    ratingId String   @id @default(cuid())
    courseId String
    studentId String
    rating    Float
    review    String?
    createdAt DateTime @default(now())

    // Relationships
    course   Course   @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
    student  User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

    @@unique([studentId, courseId])
    @@index([courseId])
    @@index([studentId])
}

model Assignment {
    assignmentId String   @id @default(cuid())
    courseId     String
    title        String
    description  String
    dueDate      DateTime
    points       Int
    createdAt    DateTime @default(now())

    // Relationships
    course       Course   @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
    submissions  AssignmentSubmission[]

    @@index([courseId])
    @@index([dueDate])
}

model AssignmentSubmission {
    submissionId String                @id @default(cuid())
    assignmentId String
    studentId    String
    status       SubmissionStatus      @default(not_started)
    submittedAt  DateTime?
    grade        Float?
    feedback     String?
    fileUrl      String?
    rubricUrl    String?

    // Relationships
    assignment   Assignment            @relation(fields: [assignmentId], references: [assignmentId], onDelete: Cascade)
    student      User                 @relation(fields: [studentId], references: [id], onDelete: Cascade)

    @@unique([studentId, assignmentId])
    @@index([assignmentId])
    @@index([studentId])
    @@index([status])
}

model Achievement {
    achievementId String        @id @default(cuid())
    studentId     String
    badgeType     BadgeType
    earnedAt      DateTime      @default(now())

    // Relationships
    student       User          @relation(fields: [studentId], references: [id], onDelete: Cascade)

    @@index([studentId])
    @@index([badgeType])
}

model QuizSubmission {
    submissionId String   @id @default(cuid())
    quizId       String
    studentId    String
    score        Float
    submittedAt  DateTime @default(now())

    // Relationships
    student      User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

    @@index([quizId])
    @@index([studentId])
}

// Enums
enum UserRole {
    student
    instructor
    admin
}

enum StudyTime {
    morning
    afternoon
    evening
    night
}

enum CourseCategory {
    programming
    design
    business
    marketing
    science
    language
    music
    art
    other
}

enum DifficultyLevel {
    beginner
    intermediate
    advanced
}

enum SubmissionStatus {
    not_started
    in_progress
    submitted
    graded
}

enum BadgeType {
    first_course
    seven_day_streak
    high_scorer
    early_bird
    perfect_score
    course_completer
    streak_master
    social_learner
}
