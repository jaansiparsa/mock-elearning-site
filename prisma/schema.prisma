generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                 @id @default(cuid())
  email                  String                 @unique
  password               String
  firstName              String
  lastName               String
  username               String                 @unique
  role                   String                 @default("student")
  avatarUrl              String                 @default("https://placekitten.com/200/200")
  notificationPreference Boolean                @default(true)
  preferredStudyTime     String                 @default("morning")
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  lastLearned            DateTime?
  currentStreak          Int                    @default(0)
  achievements           Achievement[]
  submissions            AssignmentSubmission[]
  courses                Course[]               @relation("CourseInstructor")
  enrollments            CourseEnrollment[]
  ratings                CourseRating[]
  givenAssignments       GivenAssignment[]
  quizSubmissions        QuizSubmission[]
  studySessions          StudySession[]
  learningEvents         LearningEvent[]
  progressSummary        ProgressSummary?

  @@index([email])
  @@index([username])
  @@index([role])
}

model Course {
  courseId         String               @id @default(cuid())
  title            String
  description      String
  thumbnailUrl     String               @default("https://placekitten.com/400/300")
  category         String
  difficultyLevel  String
  instructorId     String
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  assignments      Assignment[]
  instructor       User                 @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
  enrollments      CourseEnrollment[]
  requiredBy       CoursePrerequisite[] @relation("RequiredByCourses")
  prerequisites    CoursePrerequisite[] @relation("CoursePrerequisites")
  ratings          CourseRating[]
  givenAssignments GivenAssignment[]
  lessons          Lesson[]
  studySessions    StudySession[]
  learningEvents   LearningEvent[]

  @@index([instructorId])
  @@index([category])
  @@index([difficultyLevel])
}

model CoursePrerequisite {
  id             String   @id @default(cuid())
  courseId       String
  prerequisiteId String
  createdAt      DateTime @default(now())
  prerequisite   Course   @relation("RequiredByCourses", fields: [prerequisiteId], references: [courseId], onDelete: Cascade)
  course         Course   @relation("CoursePrerequisites", fields: [courseId], references: [courseId], onDelete: Cascade)

  @@unique([courseId, prerequisiteId])
  @@index([courseId])
  @@index([prerequisiteId])
}

model Lesson {
  lessonId          String             @id @default(cuid())
  courseId          String
  title             String
  description       String
  order             Int
  estimatedTime     Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  givenAssignments  GivenAssignment[]
  course            Course             @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  lessonCompletions LessonCompletion[]
  studySessions     StudySession[]
  learningEvents    LearningEvent[]

  @@index([courseId])
  @@index([order])
}

model CourseEnrollment {
  enrollmentId      String             @id @default(cuid())
  studentId         String
  courseId          String
  enrolledAt        DateTime           @default(now())
  course            Course             @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  student           User               @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lessonCompletions LessonCompletion[]

  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
}

model GivenAssignment {
  givenAssignmentId String     @id @default(cuid())
  assignmentId      String
  studentId         String
  courseId          String
  lessonId          String?
  status            String     @default("not_started")
  assignedAt        DateTime   @default(now())
  dueDate           DateTime
  startedAt         DateTime?
  completedAt       DateTime?
  grade             Float?
  feedback          String?
  notes             String?
  lesson            Lesson?    @relation(fields: [lessonId], references: [lessonId])
  course            Course     @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  student           User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assignment        Assignment @relation(fields: [assignmentId], references: [assignmentId], onDelete: Cascade)

  @@unique([studentId, assignmentId])
  @@index([studentId])
  @@index([courseId])
  @@index([assignmentId])
  @@index([lessonId])
  @@index([status])
  @@index([dueDate])
}

model LessonCompletion {
  completionId String           @id @default(cuid())
  enrollmentId String
  lessonId     String
  completedAt  DateTime         @default(now())
  lesson       Lesson           @relation(fields: [lessonId], references: [lessonId], onDelete: Cascade)
  enrollment   CourseEnrollment @relation(fields: [enrollmentId], references: [enrollmentId], onDelete: Cascade)

  @@unique([enrollmentId, lessonId])
  @@index([enrollmentId])
  @@index([lessonId])
}

model CourseRating {
  ratingId  String   @id @default(cuid())
  courseId  String
  studentId String
  rating    Float
  review    String?
  createdAt DateTime @default(now())
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [courseId], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@index([courseId])
  @@index([studentId])
}

model Assignment {
  assignmentId     String                 @id @default(cuid())
  courseId         String
  title            String
  description      String
  dueDate          DateTime
  points           Int
  createdAt        DateTime               @default(now())
  course           Course                 @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  submissions      AssignmentSubmission[]
  givenAssignments GivenAssignment[]
  studySessions    StudySession[]
  learningEvents   LearningEvent[]

  @@index([courseId])
  @@index([dueDate])
}

model AssignmentSubmission {
  submissionId String     @id @default(cuid())
  assignmentId String
  studentId    String
  status       String     @default("not_started")
  submittedAt  DateTime?
  grade        Float?
  feedback     String?
  fileUrl      String?
  rubricUrl    String?
  student      User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assignment   Assignment @relation(fields: [assignmentId], references: [assignmentId], onDelete: Cascade)

  @@unique([studentId, assignmentId])
  @@index([assignmentId])
  @@index([studentId])
  @@index([status])
}

model StudySession {
  sessionId     String   @id @default(cuid())
  userId        String
  courseId      String
  lessonId      String?
  assignmentId  String?
  startTime     DateTime @default(now())
  endTime       DateTime?
  duration      Int?     // in minutes
  activityType  String   // lesson, quiz, assignment, reading
  status        String   @default("in_progress") // in_progress, completed, abandoned
  metadata      String?  // JSON string for additional data
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course   @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  lesson        Lesson?  @relation(fields: [lessonId], references: [lessonId])
  assignment    Assignment? @relation(fields: [assignmentId], references: [assignmentId])
  learningEvents LearningEvent[]
  
  @@index([userId])
  @@index([courseId])
  @@index([startTime])
  @@index([status])
}

model LearningEvent {
  eventId       String   @id @default(cuid())
  userId        String
  eventType     String   // session_started, session_ended, lesson_completed, quiz_submitted
  sessionId     String?
  courseId      String
  lessonId      String?
  assignmentId  String?
  timestamp     DateTime @default(now())
  metadata      String?  // JSON string for additional data
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course   @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  lesson        Lesson?  @relation(fields: [lessonId], references: [lessonId])
  assignment    Assignment? @relation(fields: [assignmentId], references: [assignmentId])
  session       StudySession? @relation(fields: [sessionId], references: [sessionId])
  
  @@index([userId])
  @@index([eventType])
  @@index([timestamp])
}

model ProgressSummary {
  summaryId             String   @id @default(cuid())
  userId                String   @unique
  lastUpdated           DateTime @default(now())
  totalStudyHours       Float    @default(0)
  totalSessions         Int      @default(0)
  totalCoursesEnrolled  Int      @default(0)
  totalCoursesCompleted Int      @default(0)
  totalLessonsCompleted Int      @default(0)
  totalAssignmentsCompleted Int  @default(0)
  averageQuizScore      Float    @default(0)
  currentStreak         Int      @default(0)
  longestStreak         Int      @default(0)
  averageSessionLength  Float    @default(0)
  totalAchievements     Int      @default(0)
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Achievement {
  achievementId String   @id @default(cuid())
  studentId     String
  badgeType     String
  earnedAt      DateTime @default(now())
  student       User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([badgeType])
}

model QuizSubmission {
  submissionId String   @id @default(cuid())
  quizId       String
  studentId    String
  score        Float
  submittedAt  DateTime @default(now())
  student      User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([quizId])
  @@index([studentId])
}
